
<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      let findviowel = (viowel ) => {
        let count = 0;
        for (let char of viowel) {
          console.log(char);
          if (
            char === "a" ||
            char === "e" ||
            char === "i" ||
            char === "o" ||
            char === "u"
          ) {
            count++;
            console.log("vowel = ", count);
          }
        }
      };

      findviowel("omprakash gupta");
    </script>
  </body>
</html> -->

<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      let user = prompt("Enter The number ");

      let arr = [];

      for (let i = 1; i <= user; i++) {
        arr[i - 1] = i;
      }
      console.log(arr);

      let array = arr.reduce((result, val) => {
        return result * val;
      });
      console.log(array);
    </script>
  </body>
</html> -->


***********************  comment  **************************

Comment is cannot excute in our code it's called comment.

***********************  Operator  **************************

used to perform some operation on data.

Types of Operators

=> Arithmetic Operators 

1. Plus (+)
2. Minus (-)
3. Multiply (*)
4. Divide (/)
5. Modular (%)
6. Exponential (**) , 5 ** 2 = 5^2 = 25.

=> Unary Operators 

1. Pre Increament (++a), a = a+1.  Post Increament (a++), a = a+1. 
2. Pre Decreament (--a), a = a-1.  Post Decreament (a--), a = a-1.

=> Assignment Operators 

1. += , Ex. a += 4 is equal to a = a+4.
2. -= , Ex. a -= 4 is equal to a = a-4.
3. *= , Ex. a *= 4 is equal to a = a*4.
4. /= , Ex. a /= 4 is equal to a = a/4.
5. **= , Ex. a **= 4 is equal to a = a**4.

=> Relation/Comparision Operators 

1. >  Greterthen.  
2. >= Greterthen Equal to.
3. <  Lessthen.
4. <= Lessthen Equal to.
5. == Equal to.   , strict type === Equal to.
5. != Not Equal to.   , strict type !==  Not Equal to.


=> Logical Operators

1. Logical AND (&&).
2. Logical OR  (||).
3. Logical NOT (!).

=> Tenary Operators 

1. ?
2. :


***********************  Conditional Statement  **************************

=> if Condition

Statement 
          if(Condition){
            console.log("");
          }

=> if else Condition 

Statement 
          if(Condition){
            console.log("");
          }
          else{
            console.log("");
          }

=> else if Condition 

Statement 
          if(Condition){
            console.log("");
          }
          else if {
             console.log("");
          }
          else{
            console.log("");
          }

=> Ternary Condition 

Statement
         (condition) ? True Output : False Output;  


*********************** Loops **************************

Loops are used to execute a piece of code again and again it's called loop.

=> for Loop 

syntax 
        for(initilize; stopping condition; updation){
          console.log("");
        }

Example 
         for(let i = 1; i <= 5; i++){
          console.log("");
        }

=> while Loop 


syntax 

initilize;
        while(stopping condition){
          console.log("");
          updation;
        }

Example 
         
let i = 1;
        while(i <= 5){
          console.log("");
          i++;
        }


=> do while Loop 

syntax 

initilize;
       do{
          console.log("");
          updation;
        }while(stopping condition);

Example 
         
let i = 1;
        do{
          console.log("");
          i++;
        }while(i <= 5);


***********************  Another Type Loop  **************************

=> for-of Loop 

syntax 

let str = "HELLO"
        for(let i of str){
          console.log("i=",i);   
       }


=> for-in Loop 

syntax 

        for(let i in objval){
          console.log("i=",i);   
       }


***********************  String  **************************

String is a sequence of character used to represent text.
String are immutable(string are not change)


=> Create String 

       let str = "Hello"  / 'Hello'

=> String Length 

       strong.length 

=> String Indices 

       str[0],srt[1]


***********************  String Metods **************************

These are built-in function  to manipulate a string


=> str.toUppercase()
=> str.toLowercase()
=> str.trin() // remove start and end whitespace
=> str.slice(start,end)
=> str1.concat(str2)
=> str.replace(replaceVal,newVal)
=> str,charAt(idx)





***********************  Template Literal **************************


A way to have embedded expression is string.

       `This is a template literal`


String Interpolation 

To create string  by doing substitution of placeholder.

        `string text  ${expression} string text`


***********************  Array **************************

Cllection of similer data is called Arary.

Create Array 

let name = ["pavan", "anurag",]

Length of Array 

name.length 

Array Indices 

name.[0],name.[1],name.[2]



***********************  Array Method **************************

=> push(): add to end change in orignal Array.
=> pop():delet from end & return change in orignal Array.
=> toString():Arrar convert in string and no change in orignal Array. 
=> concat():joined mutiple array & return and no change in orignal Array.
=> unshift():add to start change in orignal Array.
=> shift():delet from start & return change in orignal Array.
=> slice(startidx,endidx):return the piece of array and no change in orignal Array.
=> splice(startidx,delcount,newEl...):change in orignal Array.
=> foreach(value,index,Array):foreach a higher order function and change in orignal Array.
=> map(value,index,Array):map method is create a duplicate array and  no change in orignal Array. 
=> filter(val,index,Array):
=> reduce(reselt,value)



***************************  Function *****************************


























































